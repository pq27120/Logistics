package com.huaren.logistics.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huaren.logistics.bean.OperatorLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OPERATOR_LOG.
*/
public class OperatorLogDao extends AbstractDao<OperatorLog, Long> {

    public static final String TABLENAME = "OPERATOR_LOG";

    /**
     * Properties of entity OperatorLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property MyType = new Property(2, String.class, "myType", false, "MY_TYPE");
        public final static Property Longitude = new Property(3, float.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, float.class, "latitude", false, "LATITUDE");
        public final static Property LPdtgBatch = new Property(5, int.class, "lPdtgBatch", false, "L_PDTG_BATCH");
        public final static Property MyNote = new Property(6, String.class, "myNote", false, "MY_NOTE");
        public final static Property DispatchNumber = new Property(7, String.class, "dispatchNumber", false, "DISPATCH_NUMBER");
        public final static Property OrderId = new Property(8, String.class, "orderId", false, "ORDER_ID");
        public final static Property EditTime = new Property(9, java.util.Date.class, "editTime", false, "EDIT_TIME");
        public final static Property OperType = new Property(10, String.class, "operType", false, "OPER_TYPE");
        public final static Property Pingjianeirong = new Property(11, String.class, "pingjianeirong", false, "PINGJIANEIRONG");
        public final static Property DetailId = new Property(12, String.class, "detailId", false, "DETAIL_ID");
    };


    public OperatorLogDao(DaoConfig config) {
        super(config);
    }
    
    public OperatorLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OPERATOR_LOG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_NAME' TEXT NOT NULL ," + // 1: userName
                "'MY_TYPE' TEXT NOT NULL ," + // 2: myType
                "'LONGITUDE' REAL NOT NULL ," + // 3: longitude
                "'LATITUDE' REAL NOT NULL ," + // 4: latitude
                "'L_PDTG_BATCH' INTEGER NOT NULL ," + // 5: lPdtgBatch
                "'MY_NOTE' TEXT," + // 6: myNote
                "'DISPATCH_NUMBER' TEXT NOT NULL ," + // 7: dispatchNumber
                "'ORDER_ID' TEXT NOT NULL ," + // 8: orderId
                "'EDIT_TIME' INTEGER," + // 9: editTime
                "'OPER_TYPE' TEXT NOT NULL ," + // 10: operType
                "'PINGJIANEIRONG' TEXT," + // 11: pingjianeirong
                "'DETAIL_ID' TEXT);"); // 12: detailId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OPERATOR_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OperatorLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserName());
        stmt.bindString(3, entity.getMyType());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindLong(6, entity.getLPdtgBatch());
 
        String myNote = entity.getMyNote();
        if (myNote != null) {
            stmt.bindString(7, myNote);
        }
        stmt.bindString(8, entity.getDispatchNumber());
        stmt.bindString(9, entity.getOrderId());
 
        java.util.Date editTime = entity.getEditTime();
        if (editTime != null) {
            stmt.bindLong(10, editTime.getTime());
        }
        stmt.bindString(11, entity.getOperType());
 
        String pingjianeirong = entity.getPingjianeirong();
        if (pingjianeirong != null) {
            stmt.bindString(12, pingjianeirong);
        }
 
        String detailId = entity.getDetailId();
        if (detailId != null) {
            stmt.bindString(13, detailId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OperatorLog readEntity(Cursor cursor, int offset) {
        OperatorLog entity = new OperatorLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userName
            cursor.getString(offset + 2), // myType
            cursor.getFloat(offset + 3), // longitude
            cursor.getFloat(offset + 4), // latitude
            cursor.getInt(offset + 5), // lPdtgBatch
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // myNote
            cursor.getString(offset + 7), // dispatchNumber
            cursor.getString(offset + 8), // orderId
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // editTime
            cursor.getString(offset + 10), // operType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pingjianeirong
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // detailId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OperatorLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.getString(offset + 1));
        entity.setMyType(cursor.getString(offset + 2));
        entity.setLongitude(cursor.getFloat(offset + 3));
        entity.setLatitude(cursor.getFloat(offset + 4));
        entity.setLPdtgBatch(cursor.getInt(offset + 5));
        entity.setMyNote(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDispatchNumber(cursor.getString(offset + 7));
        entity.setOrderId(cursor.getString(offset + 8));
        entity.setEditTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setOperType(cursor.getString(offset + 10));
        entity.setPingjianeirong(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDetailId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OperatorLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OperatorLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
