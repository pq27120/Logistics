package com.huaren.logistics.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huaren.logistics.bean.OrderDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER_DETAIL.
*/
public class OrderDetailDao extends AbstractDao<OrderDetail, String> {

    public static final String TABLENAME = "ORDER_DETAIL";

    /**
     * Properties of entity OrderDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DetailId = new Property(0, String.class, "detailId", true, "DETAIL_ID");
        public final static Property CooperateId = new Property(1, String.class, "cooperateId", false, "COOPERATE_ID");
        public final static Property DispatchNumber = new Property(2, String.class, "dispatchNumber", false, "DISPATCH_NUMBER");
        public final static Property DispatchCreatTime = new Property(3, String.class, "dispatchCreatTime", false, "DISPATCH_CREAT_TIME");
        public final static Property DriversID = new Property(4, String.class, "driversID", false, "DRIVERS_ID");
        public final static Property SPdtgEmplname = new Property(5, String.class, "sPdtgEmplname", false, "S_PDTG_EMPLNAME");
        public final static Property SPdtgEmplname2 = new Property(6, String.class, "sPdtgEmplname2", false, "S_PDTG_EMPLNAME2");
        public final static Property SuicherenyuanID = new Property(7, String.class, "suicherenyuanID", false, "SUICHERENYUAN_ID");
        public final static Property SuicherenyuanID2 = new Property(8, String.class, "suicherenyuanID2", false, "SUICHERENYUAN_ID2");
        public final static Property SPdtgEmplname3 = new Property(9, String.class, "sPdtgEmplname3", false, "S_PDTG_EMPLNAME3");
        public final static Property SPdtgVehicleno = new Property(10, String.class, "sPdtgVehicleno", false, "S_PDTG_VEHICLENO");
        public final static Property CountPieces = new Property(11, String.class, "countPieces", false, "COUNT_PIECES");
        public final static Property LPdtgBatch = new Property(12, String.class, "lPdtgBatch", false, "L_PDTG_BATCH");
        public final static Property Ordered = new Property(13, String.class, "ordered", false, "ORDERED");
        public final static Property OrderId = new Property(14, String.class, "orderId", false, "ORDER_ID");
        public final static Property WaveKey = new Property(15, String.class, "waveKey", false, "WAVE_KEY");
        public final static Property Lpn = new Property(16, String.class, "lpn", false, "LPN");
        public final static Property Mtype = new Property(17, String.class, "mtype", false, "MTYPE");
        public final static Property Uom = new Property(18, String.class, "uom", false, "UOM");
        public final static Property DetailStatus = new Property(19, String.class, "detailStatus", false, "DETAIL_STATUS");
        public final static Property Evaluation = new Property(20, String.class, "evaluation", false, "EVALUATION");
        public final static Property AddTime = new Property(21, java.util.Date.class, "addTime", false, "ADD_TIME");
        public final static Property EditTime = new Property(22, java.util.Date.class, "editTime", false, "EDIT_TIME");
    };


    public OrderDetailDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER_DETAIL' (" + //
                "'DETAIL_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: detailId
                "'COOPERATE_ID' TEXT NOT NULL ," + // 1: cooperateId
                "'DISPATCH_NUMBER' TEXT NOT NULL ," + // 2: dispatchNumber
                "'DISPATCH_CREAT_TIME' TEXT NOT NULL ," + // 3: dispatchCreatTime
                "'DRIVERS_ID' TEXT NOT NULL ," + // 4: driversID
                "'S_PDTG_EMPLNAME' TEXT NOT NULL ," + // 5: sPdtgEmplname
                "'S_PDTG_EMPLNAME2' TEXT NOT NULL ," + // 6: sPdtgEmplname2
                "'SUICHERENYUAN_ID' TEXT NOT NULL ," + // 7: suicherenyuanID
                "'SUICHERENYUAN_ID2' TEXT NOT NULL ," + // 8: suicherenyuanID2
                "'S_PDTG_EMPLNAME3' TEXT NOT NULL ," + // 9: sPdtgEmplname3
                "'S_PDTG_VEHICLENO' TEXT NOT NULL ," + // 10: sPdtgVehicleno
                "'COUNT_PIECES' TEXT NOT NULL ," + // 11: countPieces
                "'L_PDTG_BATCH' TEXT NOT NULL ," + // 12: lPdtgBatch
                "'ORDERED' TEXT NOT NULL ," + // 13: ordered
                "'ORDER_ID' TEXT NOT NULL ," + // 14: orderId
                "'WAVE_KEY' TEXT NOT NULL ," + // 15: waveKey
                "'LPN' TEXT NOT NULL ," + // 16: lpn
                "'MTYPE' TEXT NOT NULL ," + // 17: mtype
                "'UOM' TEXT NOT NULL ," + // 18: uom
                "'DETAIL_STATUS' TEXT NOT NULL ," + // 19: detailStatus
                "'EVALUATION' TEXT," + // 20: evaluation
                "'ADD_TIME' INTEGER NOT NULL ," + // 21: addTime
                "'EDIT_TIME' INTEGER);"); // 22: editTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderDetail entity) {
        stmt.clearBindings();
 
        String detailId = entity.getDetailId();
        if (detailId != null) {
            stmt.bindString(1, detailId);
        }
        stmt.bindString(2, entity.getCooperateId());
        stmt.bindString(3, entity.getDispatchNumber());
        stmt.bindString(4, entity.getDispatchCreatTime());
        stmt.bindString(5, entity.getDriversID());
        stmt.bindString(6, entity.getSPdtgEmplname());
        stmt.bindString(7, entity.getSPdtgEmplname2());
        stmt.bindString(8, entity.getSuicherenyuanID());
        stmt.bindString(9, entity.getSuicherenyuanID2());
        stmt.bindString(10, entity.getSPdtgEmplname3());
        stmt.bindString(11, entity.getSPdtgVehicleno());
        stmt.bindString(12, entity.getCountPieces());
        stmt.bindString(13, entity.getLPdtgBatch());
        stmt.bindString(14, entity.getOrdered());
        stmt.bindString(15, entity.getOrderId());
        stmt.bindString(16, entity.getWaveKey());
        stmt.bindString(17, entity.getLpn());
        stmt.bindString(18, entity.getMtype());
        stmt.bindString(19, entity.getUom());
        stmt.bindString(20, entity.getDetailStatus());
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(21, evaluation);
        }
        stmt.bindLong(22, entity.getAddTime().getTime());
 
        java.util.Date editTime = entity.getEditTime();
        if (editTime != null) {
            stmt.bindLong(23, editTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderDetail readEntity(Cursor cursor, int offset) {
        OrderDetail entity = new OrderDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // detailId
            cursor.getString(offset + 1), // cooperateId
            cursor.getString(offset + 2), // dispatchNumber
            cursor.getString(offset + 3), // dispatchCreatTime
            cursor.getString(offset + 4), // driversID
            cursor.getString(offset + 5), // sPdtgEmplname
            cursor.getString(offset + 6), // sPdtgEmplname2
            cursor.getString(offset + 7), // suicherenyuanID
            cursor.getString(offset + 8), // suicherenyuanID2
            cursor.getString(offset + 9), // sPdtgEmplname3
            cursor.getString(offset + 10), // sPdtgVehicleno
            cursor.getString(offset + 11), // countPieces
            cursor.getString(offset + 12), // lPdtgBatch
            cursor.getString(offset + 13), // ordered
            cursor.getString(offset + 14), // orderId
            cursor.getString(offset + 15), // waveKey
            cursor.getString(offset + 16), // lpn
            cursor.getString(offset + 17), // mtype
            cursor.getString(offset + 18), // uom
            cursor.getString(offset + 19), // detailStatus
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // evaluation
            new java.util.Date(cursor.getLong(offset + 21)), // addTime
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)) // editTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderDetail entity, int offset) {
        entity.setDetailId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCooperateId(cursor.getString(offset + 1));
        entity.setDispatchNumber(cursor.getString(offset + 2));
        entity.setDispatchCreatTime(cursor.getString(offset + 3));
        entity.setDriversID(cursor.getString(offset + 4));
        entity.setSPdtgEmplname(cursor.getString(offset + 5));
        entity.setSPdtgEmplname2(cursor.getString(offset + 6));
        entity.setSuicherenyuanID(cursor.getString(offset + 7));
        entity.setSuicherenyuanID2(cursor.getString(offset + 8));
        entity.setSPdtgEmplname3(cursor.getString(offset + 9));
        entity.setSPdtgVehicleno(cursor.getString(offset + 10));
        entity.setCountPieces(cursor.getString(offset + 11));
        entity.setLPdtgBatch(cursor.getString(offset + 12));
        entity.setOrdered(cursor.getString(offset + 13));
        entity.setOrderId(cursor.getString(offset + 14));
        entity.setWaveKey(cursor.getString(offset + 15));
        entity.setLpn(cursor.getString(offset + 16));
        entity.setMtype(cursor.getString(offset + 17));
        entity.setUom(cursor.getString(offset + 18));
        entity.setDetailStatus(cursor.getString(offset + 19));
        entity.setEvaluation(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAddTime(new java.util.Date(cursor.getLong(offset + 21)));
        entity.setEditTime(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(OrderDetail entity, long rowId) {
        return entity.getDetailId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(OrderDetail entity) {
        if(entity != null) {
            return entity.getDetailId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
