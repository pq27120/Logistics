package com.huaren.logistics.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huaren.logistics.bean.OrderDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER_DETAIL.
*/
public class OrderDetailDao extends AbstractDao<OrderDetail, String> {

    public static final String TABLENAME = "ORDER_DETAIL";

    /**
     * Properties of entity OrderDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GoodsId = new Property(0, String.class, "goodsId", false, "GOODS_ID");
        public final static Property Ordered = new Property(1, String.class, "ordered", false, "ORDERED");
        public final static Property GoodsName = new Property(2, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property DispatchType = new Property(3, String.class, "dispatchType", false, "DISPATCH_TYPE");
        public final static Property IGroiValunum = new Property(4, String.class, "iGroiValunum", false, "I_GROI_VALUNUM");
        public final static Property Lpn = new Property(5, String.class, "lpn", true, "LPN");
        public final static Property DetailStatus = new Property(6, String.class, "detailStatus", false, "DETAIL_STATUS");
        public final static Property AddTime = new Property(7, java.util.Date.class, "addTime", false, "ADD_TIME");
        public final static Property EditTime = new Property(8, java.util.Date.class, "editTime", false, "EDIT_TIME");
    };


    public OrderDetailDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER_DETAIL' (" + //
                "'GOODS_ID' TEXT NOT NULL ," + // 0: goodsId
                "'ORDERED' TEXT NOT NULL ," + // 1: ordered
                "'GOODS_NAME' TEXT NOT NULL ," + // 2: goodsName
                "'DISPATCH_TYPE' TEXT NOT NULL ," + // 3: dispatchType
                "'I_GROI_VALUNUM' TEXT NOT NULL ," + // 4: iGroiValunum
                "'LPN' TEXT PRIMARY KEY NOT NULL ," + // 5: lpn
                "'DETAIL_STATUS' TEXT NOT NULL ," + // 6: detailStatus
                "'ADD_TIME' INTEGER NOT NULL ," + // 7: addTime
                "'EDIT_TIME' INTEGER);"); // 8: editTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderDetail entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getGoodsId());
        stmt.bindString(2, entity.getOrdered());
        stmt.bindString(3, entity.getGoodsName());
        stmt.bindString(4, entity.getDispatchType());
        stmt.bindString(5, entity.getIGroiValunum());
 
        String lpn = entity.getLpn();
        if (lpn != null) {
            stmt.bindString(6, lpn);
        }
        stmt.bindString(7, entity.getDetailStatus());
        stmt.bindLong(8, entity.getAddTime().getTime());
 
        java.util.Date editTime = entity.getEditTime();
        if (editTime != null) {
            stmt.bindLong(9, editTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5);
    }    

    /** @inheritdoc */
    @Override
    public OrderDetail readEntity(Cursor cursor, int offset) {
        OrderDetail entity = new OrderDetail( //
            cursor.getString(offset + 0), // goodsId
            cursor.getString(offset + 1), // ordered
            cursor.getString(offset + 2), // goodsName
            cursor.getString(offset + 3), // dispatchType
            cursor.getString(offset + 4), // iGroiValunum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lpn
            cursor.getString(offset + 6), // detailStatus
            new java.util.Date(cursor.getLong(offset + 7)), // addTime
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // editTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderDetail entity, int offset) {
        entity.setGoodsId(cursor.getString(offset + 0));
        entity.setOrdered(cursor.getString(offset + 1));
        entity.setGoodsName(cursor.getString(offset + 2));
        entity.setDispatchType(cursor.getString(offset + 3));
        entity.setIGroiValunum(cursor.getString(offset + 4));
        entity.setLpn(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDetailStatus(cursor.getString(offset + 6));
        entity.setAddTime(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setEditTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(OrderDetail entity, long rowId) {
        return entity.getLpn();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(OrderDetail entity) {
        if(entity != null) {
            return entity.getLpn();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
