package com.huaren.logistics.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huaren.logistics.bean.SysDicValue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SYS_DIC_VALUE.
*/
public class SysDicValueDao extends AbstractDao<SysDicValue, Long> {

    public static final String TABLENAME = "SYS_DIC_VALUE";

    /**
     * Properties of entity SysDicValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property MyDisplayValue = new Property(1, String.class, "myDisplayValue", false, "MY_DISPLAY_VALUE");
        public final static Property DicId = new Property(2, int.class, "dicId", false, "DIC_ID");
        public final static Property MyName = new Property(3, String.class, "myName", false, "MY_NAME");
        public final static Property Note = new Property(4, String.class, "note", false, "NOTE");
    };


    public SysDicValueDao(DaoConfig config) {
        super(config);
    }
    
    public SysDicValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SYS_DIC_VALUE' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'MY_DISPLAY_VALUE' TEXT NOT NULL ," + // 1: myDisplayValue
                "'DIC_ID' INTEGER NOT NULL ," + // 2: dicId
                "'MY_NAME' TEXT NOT NULL ," + // 3: myName
                "'NOTE' TEXT);"); // 4: note
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SYS_DIC_VALUE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SysDicValue entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMyDisplayValue());
        stmt.bindLong(3, entity.getDicId());
        stmt.bindString(4, entity.getMyName());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SysDicValue readEntity(Cursor cursor, int offset) {
        SysDicValue entity = new SysDicValue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // myDisplayValue
            cursor.getInt(offset + 2), // dicId
            cursor.getString(offset + 3), // myName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // note
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SysDicValue entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMyDisplayValue(cursor.getString(offset + 1));
        entity.setDicId(cursor.getInt(offset + 2));
        entity.setMyName(cursor.getString(offset + 3));
        entity.setNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SysDicValue entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SysDicValue entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
