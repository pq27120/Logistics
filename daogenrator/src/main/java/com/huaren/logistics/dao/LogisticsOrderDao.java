package com.huaren.logistics.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huaren.logistics.bean.LogisticsOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOGISTICS_ORDER.
*/
public class LogisticsOrderDao extends AbstractDao<LogisticsOrder, String> {

    public static final String TABLENAME = "LOGISTICS_ORDER";

    /**
     * Properties of entity LogisticsOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Ordered = new Property(0, String.class, "ordered", true, "ORDERED");
        public final static Property DispatchNumber = new Property(1, String.class, "dispatchNumber", false, "DISPATCH_NUMBER");
        public final static Property DPdtgDate = new Property(2, String.class, "dPdtgDate", false, "D_PDTG_DATE");
        public final static Property LPdtgBatch = new Property(3, String.class, "lPdtgBatch", false, "L_PDTG_BATCH");
        public final static Property LPdtgMerdcategOldkey = new Property(4, String.class, "lPdtgMerdcategOldkey", false, "L_PDTG_MERDCATEG_OLDKEY");
        public final static Property BoxNumber = new Property(5, int.class, "boxNumber", false, "BOX_NUMBER");
        public final static Property PathName = new Property(6, String.class, "pathName", false, "PATH_NAME");
        public final static Property OrderStatus = new Property(7, String.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property Evaluation = new Property(8, String.class, "evaluation", false, "EVALUATION");
        public final static Property CooperateID = new Property(9, String.class, "cooperateID", false, "COOPERATE_ID");
        public final static Property AddTime = new Property(10, java.util.Date.class, "addTime", false, "ADD_TIME");
        public final static Property EditTime = new Property(11, java.util.Date.class, "editTime", false, "EDIT_TIME");
    };


    public LogisticsOrderDao(DaoConfig config) {
        super(config);
    }
    
    public LogisticsOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOGISTICS_ORDER' (" + //
                "'ORDERED' TEXT PRIMARY KEY NOT NULL ," + // 0: ordered
                "'DISPATCH_NUMBER' TEXT NOT NULL ," + // 1: dispatchNumber
                "'D_PDTG_DATE' TEXT NOT NULL ," + // 2: dPdtgDate
                "'L_PDTG_BATCH' TEXT NOT NULL ," + // 3: lPdtgBatch
                "'L_PDTG_MERDCATEG_OLDKEY' TEXT NOT NULL ," + // 4: lPdtgMerdcategOldkey
                "'BOX_NUMBER' INTEGER NOT NULL ," + // 5: boxNumber
                "'PATH_NAME' TEXT NOT NULL ," + // 6: pathName
                "'ORDER_STATUS' TEXT NOT NULL ," + // 7: orderStatus
                "'EVALUATION' TEXT," + // 8: evaluation
                "'COOPERATE_ID' TEXT NOT NULL ," + // 9: cooperateID
                "'ADD_TIME' INTEGER NOT NULL ," + // 10: addTime
                "'EDIT_TIME' INTEGER);"); // 11: editTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOGISTICS_ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LogisticsOrder entity) {
        stmt.clearBindings();
 
        String ordered = entity.getOrdered();
        if (ordered != null) {
            stmt.bindString(1, ordered);
        }
        stmt.bindString(2, entity.getDispatchNumber());
        stmt.bindString(3, entity.getDPdtgDate());
        stmt.bindString(4, entity.getLPdtgBatch());
        stmt.bindString(5, entity.getLPdtgMerdcategOldkey());
        stmt.bindLong(6, entity.getBoxNumber());
        stmt.bindString(7, entity.getPathName());
        stmt.bindString(8, entity.getOrderStatus());
 
        String evaluation = entity.getEvaluation();
        if (evaluation != null) {
            stmt.bindString(9, evaluation);
        }
        stmt.bindString(10, entity.getCooperateID());
        stmt.bindLong(11, entity.getAddTime().getTime());
 
        java.util.Date editTime = entity.getEditTime();
        if (editTime != null) {
            stmt.bindLong(12, editTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LogisticsOrder readEntity(Cursor cursor, int offset) {
        LogisticsOrder entity = new LogisticsOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ordered
            cursor.getString(offset + 1), // dispatchNumber
            cursor.getString(offset + 2), // dPdtgDate
            cursor.getString(offset + 3), // lPdtgBatch
            cursor.getString(offset + 4), // lPdtgMerdcategOldkey
            cursor.getInt(offset + 5), // boxNumber
            cursor.getString(offset + 6), // pathName
            cursor.getString(offset + 7), // orderStatus
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // evaluation
            cursor.getString(offset + 9), // cooperateID
            new java.util.Date(cursor.getLong(offset + 10)), // addTime
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)) // editTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LogisticsOrder entity, int offset) {
        entity.setOrdered(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDispatchNumber(cursor.getString(offset + 1));
        entity.setDPdtgDate(cursor.getString(offset + 2));
        entity.setLPdtgBatch(cursor.getString(offset + 3));
        entity.setLPdtgMerdcategOldkey(cursor.getString(offset + 4));
        entity.setBoxNumber(cursor.getInt(offset + 5));
        entity.setPathName(cursor.getString(offset + 6));
        entity.setOrderStatus(cursor.getString(offset + 7));
        entity.setEvaluation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCooperateID(cursor.getString(offset + 9));
        entity.setAddTime(new java.util.Date(cursor.getLong(offset + 10)));
        entity.setEditTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LogisticsOrder entity, long rowId) {
        return entity.getOrdered();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LogisticsOrder entity) {
        if(entity != null) {
            return entity.getOrdered();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
