package com.huaren.logistics.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huaren.logistics.bean.RecycleInput;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECYCLE_INPUT.
*/
public class RecycleInputDao extends AbstractDao<RecycleInput, Long> {

    public static final String TABLENAME = "RECYCLE_INPUT";

    /**
     * Properties of entity RecycleInput.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CooperateId = new Property(1, int.class, "cooperateId", false, "COOPERATE_ID");
        public final static Property LPdtgBatch = new Property(2, int.class, "lPdtgBatch", false, "L_PDTG_BATCH");
        public final static Property RecycleNum = new Property(3, int.class, "recycleNum", false, "RECYCLE_NUM");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property RecycleTime = new Property(5, java.util.Date.class, "recycleTime", false, "RECYCLE_TIME");
        public final static Property EditTime = new Property(6, java.util.Date.class, "editTime", false, "EDIT_TIME");
    };


    public RecycleInputDao(DaoConfig config) {
        super(config);
    }
    
    public RecycleInputDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECYCLE_INPUT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'COOPERATE_ID' INTEGER NOT NULL ," + // 1: cooperateId
                "'L_PDTG_BATCH' INTEGER NOT NULL ," + // 2: lPdtgBatch
                "'RECYCLE_NUM' INTEGER NOT NULL ," + // 3: recycleNum
                "'STATUS' TEXT NOT NULL ," + // 4: status
                "'RECYCLE_TIME' INTEGER NOT NULL ," + // 5: recycleTime
                "'EDIT_TIME' INTEGER);"); // 6: editTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECYCLE_INPUT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecycleInput entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCooperateId());
        stmt.bindLong(3, entity.getLPdtgBatch());
        stmt.bindLong(4, entity.getRecycleNum());
        stmt.bindString(5, entity.getStatus());
        stmt.bindLong(6, entity.getRecycleTime().getTime());
 
        java.util.Date editTime = entity.getEditTime();
        if (editTime != null) {
            stmt.bindLong(7, editTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecycleInput readEntity(Cursor cursor, int offset) {
        RecycleInput entity = new RecycleInput( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // cooperateId
            cursor.getInt(offset + 2), // lPdtgBatch
            cursor.getInt(offset + 3), // recycleNum
            cursor.getString(offset + 4), // status
            new java.util.Date(cursor.getLong(offset + 5)), // recycleTime
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // editTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecycleInput entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCooperateId(cursor.getInt(offset + 1));
        entity.setLPdtgBatch(cursor.getInt(offset + 2));
        entity.setRecycleNum(cursor.getInt(offset + 3));
        entity.setStatus(cursor.getString(offset + 4));
        entity.setRecycleTime(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setEditTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RecycleInput entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RecycleInput entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
