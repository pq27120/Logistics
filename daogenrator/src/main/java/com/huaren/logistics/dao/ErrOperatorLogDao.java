package com.huaren.logistics.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.huaren.logistics.bean.ErrOperatorLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ERR_OPERATOR_LOG.
*/
public class ErrOperatorLogDao extends AbstractDao<ErrOperatorLog, Long> {

    public static final String TABLENAME = "ERR_OPERATOR_LOG";

    /**
     * Properties of entity ErrOperatorLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CustomerId = new Property(1, String.class, "customerId", false, "CUSTOMER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property LPdtgBatch = new Property(3, int.class, "lPdtgBatch", false, "L_PDTG_BATCH");
        public final static Property DriverId = new Property(4, String.class, "driverId", false, "DRIVER_ID");
        public final static Property CooperateID = new Property(5, String.class, "cooperateID", false, "COOPERATE_ID");
        public final static Property Lpn = new Property(6, String.class, "lpn", false, "LPN");
        public final static Property AddTime = new Property(7, java.util.Date.class, "addTime", false, "ADD_TIME");
    };


    public ErrOperatorLogDao(DaoConfig config) {
        super(config);
    }
    
    public ErrOperatorLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ERR_OPERATOR_LOG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CUSTOMER_ID' TEXT NOT NULL ," + // 1: customerId
                "'USER_NAME' TEXT NOT NULL ," + // 2: userName
                "'L_PDTG_BATCH' INTEGER NOT NULL ," + // 3: lPdtgBatch
                "'DRIVER_ID' TEXT NOT NULL ," + // 4: driverId
                "'COOPERATE_ID' TEXT NOT NULL ," + // 5: cooperateID
                "'LPN' TEXT," + // 6: lpn
                "'ADD_TIME' INTEGER);"); // 7: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ERR_OPERATOR_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ErrOperatorLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCustomerId());
        stmt.bindString(3, entity.getUserName());
        stmt.bindLong(4, entity.getLPdtgBatch());
        stmt.bindString(5, entity.getDriverId());
        stmt.bindString(6, entity.getCooperateID());
 
        String lpn = entity.getLpn();
        if (lpn != null) {
            stmt.bindString(7, lpn);
        }
 
        java.util.Date addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(8, addTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ErrOperatorLog readEntity(Cursor cursor, int offset) {
        ErrOperatorLog entity = new ErrOperatorLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // customerId
            cursor.getString(offset + 2), // userName
            cursor.getInt(offset + 3), // lPdtgBatch
            cursor.getString(offset + 4), // driverId
            cursor.getString(offset + 5), // cooperateID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lpn
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // addTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ErrOperatorLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCustomerId(cursor.getString(offset + 1));
        entity.setUserName(cursor.getString(offset + 2));
        entity.setLPdtgBatch(cursor.getInt(offset + 3));
        entity.setDriverId(cursor.getString(offset + 4));
        entity.setCooperateID(cursor.getString(offset + 5));
        entity.setLpn(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ErrOperatorLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ErrOperatorLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
